@import domain._
@(candidate: Candidate, version: String, platform: Platform)#!/bin/bash
#Post Hook: osx-java-8-oracle
@defining(version.split("\\.0\\.")) { case Array(major, minor) =>
function __sdkman_post_installation_hook {
    __sdkman_echo_debug "A @{platform.name} post-install hook was found for @{candidate.name} @{version}-oracle."

    __sdkman_authorise_user || return 1

    local work_dir="${SDKMAN_DIR}/tmp/out"
    local candidate_work_dir="${work_dir}/@{candidate.identifier}-@{version}-oracle"
    local cookie_file="${SDKMAN_DIR}/var/cookie"
    local mount_volume="/Volumes/JDK @major Update @minor"
    local jdk_home_folder="/Library/Java/JavaVirtualMachines/jdk1.@{major}.0_@{minor}.jdk/Contents/Home"

    echo ""
    echo "Repackaging @{candidate.name} @version..."

    \rm -rf "$work_dir"
    mkdir -p "$work_dir"

    echo "Attaching to the DMG..."
    disks=$(hdiutil attach -noverify -nomount "$binary_input")
    disk=$(echo "$disks" | awk '{print $1;}' | head -n 1)

    echo "Mounting DMG as Volume..."
    diskutil mountDisk "$disk"

    echo "Installing PKG inside DMG..."
    sudo -E installer -package "${mount_volume}/JDK @major Update @{minor}.pkg" -target LocalSystem

    echo "Copy JDK Home to temp folder..."
    cp -rf "$jdk_home_folder" "$candidate_work_dir"

    local present_dir="$(pwd)"
    cd "$work_dir"
    echo "Preparing archive..."
    /usr/bin/env zip -qyr "$zip_output" .
    cd "$present_dir"

    echo "Unmounting volume..."
    hdiutil unmount "$mount_volume"

    echo "Done repackaging..."
    echo "Cleaning up cookie..."
    \rm "$cookie_file"

    __sdkman_echo_debug "Cleaning up residual files..."
    \rm "$binary_input"
    \rm -rf "$work_dir"
}

function __sdkman_validate_input_binary {
    hdiutil verify "$1"
}

function __sdkman_authorise_user {
    echo "We will be needing super powers..."
    authorised=$(sudo echo 'true')
    if [[ "$authorised" != 'true' ]]; then
        echo "Authorisation failed. Please try installing again..."
        return 1
    fi
}
}
